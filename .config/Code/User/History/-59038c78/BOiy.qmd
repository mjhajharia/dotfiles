---
title: "Eight Schools"
author: ""
date: ""
format:
  html:
    code-fold: true
execute: 
  daemon: 99999
  cache: true
figures:
  fig-format: png
toc: false
monobackgroundcolor: "#FFFFFF"
mainfont: "Palatino Linotype"
---

```{julia}
using Revise, DynamicHMC, PosteriorDB, Random, StanLogDensityProblems, JSON, BridgeStan, DataFrames, LinearAlgebra, StatsBase, Distributions
using Plots, ColorSchemes, LaTeXStrings, Statistics, CSV
Plots.theme(:default)
const BS = BridgeStan;
```

```{julia}
includet("snippets/utils.jl");
```

```{julia}
post, path, data = extract_pdb("eight_schools_centered", "eight_schools-eight_schools_centered");
post_nc, path_nc, data_nc = extract_pdb("eight_schools_noncentered", "eight_schools-eight_schools_noncentered");
```

```{julia}
#| warning: false
fullpath = abspathâˆ˜expanduser
BS.set_bridgestan_path!(fullpath("~/github/roualdes/bridgestan"));
bs_model = BS.StanModel(stan_file=path, data=data);
bs_model_nc = BS.StanModel(stan_file=path_nc, data=data_nc);
```

```{julia}
constrained_draws = get_draws(post);
constrained_draws_nc = get_draws(post_nc);

mu, tau = constrained_draws_nc[:, end-1], constrained_draws_nc[:, end]
for i in 1:8
    constrained_draws_nc[:, i] = (constrained_draws_nc[:, i] - mu) ./ tau
end
```

```{julia}
unconstrained_draws = unconstrain_draws(bs_model, constrained_draws);
unconstrained_draws_nc = unconstrain_draws(bs_model_nc, constrained_draws_nc);
```

```{julia}
PCA_, ZCA_, cholesky_ = whitening_transforms(unconstrained_draws);
PCA_nc, ZCA_nc, cholesky_nc = whitening_transforms(unconstrained_draws_nc);
```


```{julia}
hessian_df_cholesky = get_hessian_info(bs_model, cholesky_, unconstrained_draws);
hessian_df_ZCA = get_hessian_info(bs_model, ZCA_, unconstrained_draws);
hessian_df_PCA = get_hessian_info(bs_model, PCA_, unconstrained_draws);

hessian_df_cholesky_nc = get_hessian_info(bs_model, cholesky_nc, unconstrained_draws_nc);
hessian_df_ZCA_nc = get_hessian_info(bs_model, ZCA_nc, unconstrained_draws_nc);
hessian_df_PCA_nc= get_hessian_info(bs_model, PCA_nc, unconstrained_draws_nc);
```

```{julia}
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/cholesky.csv"), hessian_df_cholesky);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/cholesky_nc.csv"), hessian_df_cholesky_nc);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/ZCA.csv"), hessian_df_ZCA);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/ZCA_nc.csv"), hessian_df_ZCA_nc);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/PCA.csv"), hessian_df_PCA);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/PCA_nc.csv"), hessian_df_PCA_nc);
```

```{julia}
scatter(unconstrained_draws_nc[:, 1], unconstrained_draws_nc[:, end], alpha=0.1, label="Non Centered Model")
xaxis!(L"\Theta[0]")
yaxis!(L"\mathrm{log\tau}")
plot!(fontfamily="Palatino")
```


```{julia}
scatter(unconstrained_draws[:, 1], unconstrained_draws[:, end], alpha=0.1, label="Centered Model")
xaxis!(L"\Theta[0]")
yaxis!(L"\mathrm{log\tau}")
plot!(fontfamily="Palatino")
```

```{julia}
PCA_, ZCA_, cholesky_ = whitening_transforms(unconstrained_draws)
PCA_nc, ZCA_nc, cholesky_nc = whitening_transforms(unconstrained_draws_nc)

hessian_df_cholesky = get_hessian_info(bs_model, cholesky_, unconstrained_draws)
hessian_df_ZCA = get_hessian_info(bs_model, ZCA_, unconstrained_draws)
hessian_df_PCA = get_hessian_info(bs_model, PCA_, unconstrained_draws)

hessian_df_cholesky_nc = get_hessian_info(bs_model, cholesky_nc, unconstrained_draws_nc)
hessian_df_ZCA_nc = get_hessian_info(bs_model, ZCA_nc, unconstrained_draws_nc)
hessian_df_PCA_nc= get_hessian_info(bs_model, PCA_nc, unconstrained_draws_nc)

CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/cholesky.csv"), hessian_df_cholesky);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/cholesky_nc.csv"), hessian_df_cholesky_nc);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/ZCA.csv"), hessian_df_ZCA);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/ZCA_nc.csv"), hessian_df_ZCA_nc);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/PCA.csv"), hessian_df_PCA);
CSV.write(fullpath("~/github/mjhajharia/diagnosing-hmc/data/eightschools/PCA_nc.csv"), hessian_df_PCA_nc);
```

```{julia}
CN_Hessian_nc = log.(hessian_df_cholesky_nc[!, "CN_Hessian"]);
CN_Hessian_cholesky_nc = log.(hessian_df_cholesky_nc[!, "CN_Transformed_Hessian"]);

CN_Hessian = log.(hessian_df_cholesky[!, "CN_Hessian"]);
CN_Hessian_cholesky = log.(hessian_df_cholesky[!, "CN_Transformed_Hessian"]);
```

```{julia}
Plots.theme(:mute)
scatter(unconstrained_draws[:, 1], unconstrained_draws[:, end], alpha=0.1, zcolor=CN_Hessian, label=L"\mathrm{Centered: \kappa(H)}");
xaxis!(L"\Theta[0]")
yaxis!(L"\mathrm{log\tau}")
plot!(fontfamily="Palatino")
```
```{julia}
scatter(unconstrained_draws_nc[:, 1], unconstrained_draws_nc[:, end], alpha=0.1, zcolor=CN_Hessian_nc, label=L"\mathrm{Non-Centered: \kappa(H)}");
xaxis!(L"\Theta[0]")
yaxis!(L"\mathrm{log\tau}")
plot!(fontfamily="Palatino")
```
```{julia}
scatter(unconstrained_draws[:, 1], unconstrained_draws[:, end], alpha=0.1, zcolor=CN_Hessian_cholesky, label=L"\mathrm{Centered: \kappa(H_T)}");
xaxis!(L"\Theta[0]")
yaxis!(L"\mathrm{log\tau}")
plot!(fontfamily="Palatino")
```
```{julia}
scatter(unconstrained_draws_nc[:, 1], unconstrained_draws_nc[:, end], alpha=0.1, zcolor=CN_Hessian_cholesky_nc, label=L"\mathrm{Non-Centered: \kappa(H_T)}");
xaxis!(L"\Theta[0]")
yaxis!(L"\mathrm{log\tau}")
plot!(fontfamily="Palatino")
```

```{julia}
using Plots; pyplot()

plot(unconstrained_draws_nc[:, 1], log.(CN_Hessian_cholesky_nc), unconstrained_draws_nc[:, end], st=:surface,camera=(-30,30))
```