"use strict";(self.webpackChunknotion_next=self.webpackChunknotion_next||[]).push([[959],{90959:(o,n,e)=>{e.r(n);e(57658);var t=e(92595),a=e(97880),s=e(16861);const r={create:"Creating transaction",cancel:"Cancelling transaction",commitEmpty:"Ignoring empty transaction",commit:"Committing transaction"},c={onApplyOperation(o){let{operation:n,store:e}=o;const t=n.args,s=[];if(n.path.length&&s.push(`@ ${n.path.join(".")}`),("set"===n.command||"update"===n.command)&&(0,a.Kn)(t)&&!Array.isArray(t)){const o=Object.keys(t),n=3,e=o.slice(0,n).join(", ");o.length<=n?s.push(`{${e}}`):s.push(`{${e}, and ${o.length-n} more}`)}console.groupCollapsed(`%c  Applying operation %c${n.command}%c ${s.join(" ")}`,"font-weight: normal","font-weight: normal; color: blue","font-weight: normal"),console.log(n),console.log(e),console.trace(),console.groupEnd()},onTransactionEvent(o,n){const e=n.getUserActionForAnalyticsPurposesOnly(),t=r[o];console.groupCollapsed(`${t} ${e}`),console.log(n),console.trace(),console.groupEnd()}};t.exposeDebugValue("toggleTransactionDebugging",(()=>{const o=!s.Z.provider;s.Z.provider=o?c:void 0,console.log(`Transaction debugging is now ${o?"enabled":"disabled"}.`)})),s.Z.provider&&(console.log("Installing new transaction debug provider."),s.Z.provider=c)}}]);